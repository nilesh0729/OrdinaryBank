// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nilesh0729/OrdinaryBank/db/Result (interfaces: Store)

// Package mockDB is a generated GoMock package.
package mockDB

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	Anuskh "github.com/nilesh0729/OrdinaryBank/db/Result"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddBalance mocks base method.
func (m *MockStore) AddBalance(arg0 context.Context, arg1 Anuskh.AddBalanceParams) (Anuskh.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBalance", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBalance indicates an expected call of AddBalance.
func (mr *MockStoreMockRecorder) AddBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBalance", reflect.TypeOf((*MockStore)(nil).AddBalance), arg0, arg1)
}

// CreateAccounts mocks base method.
func (m *MockStore) CreateAccounts(arg0 context.Context, arg1 Anuskh.CreateAccountsParams) (Anuskh.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccounts", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccounts indicates an expected call of CreateAccounts.
func (mr *MockStoreMockRecorder) CreateAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccounts", reflect.TypeOf((*MockStore)(nil).CreateAccounts), arg0, arg1)
}

// CreateEntries mocks base method.
func (m *MockStore) CreateEntries(arg0 context.Context, arg1 Anuskh.CreateEntriesParams) (Anuskh.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEntries", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEntries indicates an expected call of CreateEntries.
func (mr *MockStoreMockRecorder) CreateEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEntries", reflect.TypeOf((*MockStore)(nil).CreateEntries), arg0, arg1)
}

// CreateTransfers mocks base method.
func (m *MockStore) CreateTransfers(arg0 context.Context, arg1 Anuskh.CreateTransfersParams) (Anuskh.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransfers", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransfers indicates an expected call of CreateTransfers.
func (mr *MockStoreMockRecorder) CreateTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransfers", reflect.TypeOf((*MockStore)(nil).CreateTransfers), arg0, arg1)
}

// DeleteAccounts mocks base method.
func (m *MockStore) DeleteAccounts(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccounts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccounts indicates an expected call of DeleteAccounts.
func (mr *MockStoreMockRecorder) DeleteAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccounts", reflect.TypeOf((*MockStore)(nil).DeleteAccounts), arg0, arg1)
}

// DeleteEntries mocks base method.
func (m *MockStore) DeleteEntries(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntries", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntries indicates an expected call of DeleteEntries.
func (mr *MockStoreMockRecorder) DeleteEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntries", reflect.TypeOf((*MockStore)(nil).DeleteEntries), arg0, arg1)
}

// DeleteTransfers mocks base method.
func (m *MockStore) DeleteTransfers(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransfers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransfers indicates an expected call of DeleteTransfers.
func (mr *MockStoreMockRecorder) DeleteTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransfers", reflect.TypeOf((*MockStore)(nil).DeleteTransfers), arg0, arg1)
}

// GetAccounts mocks base method.
func (m *MockStore) GetAccounts(arg0 context.Context, arg1 int64) (Anuskh.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts.
func (mr *MockStoreMockRecorder) GetAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockStore)(nil).GetAccounts), arg0, arg1)
}

// GetAccountsForUpdate mocks base method.
func (m *MockStore) GetAccountsForUpdate(arg0 context.Context, arg1 int64) (Anuskh.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsForUpdate", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsForUpdate indicates an expected call of GetAccountsForUpdate.
func (mr *MockStoreMockRecorder) GetAccountsForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsForUpdate", reflect.TypeOf((*MockStore)(nil).GetAccountsForUpdate), arg0, arg1)
}

// GetEntries mocks base method.
func (m *MockStore) GetEntries(arg0 context.Context, arg1 int64) (Anuskh.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockStoreMockRecorder) GetEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockStore)(nil).GetEntries), arg0, arg1)
}

// GetTransfers mocks base method.
func (m *MockStore) GetTransfers(arg0 context.Context, arg1 int64) (Anuskh.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransfers", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransfers indicates an expected call of GetTransfers.
func (mr *MockStoreMockRecorder) GetTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransfers", reflect.TypeOf((*MockStore)(nil).GetTransfers), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockStore) ListAccounts(arg0 context.Context, arg1 Anuskh.ListAccountsParams) ([]Anuskh.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0, arg1)
	ret0, _ := ret[0].([]Anuskh.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockStoreMockRecorder) ListAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockStore)(nil).ListAccounts), arg0, arg1)
}

// ListEntries mocks base method.
func (m *MockStore) ListEntries(arg0 context.Context, arg1 Anuskh.ListEntriesParams) ([]Anuskh.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntries", arg0, arg1)
	ret0, _ := ret[0].([]Anuskh.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntries indicates an expected call of ListEntries.
func (mr *MockStoreMockRecorder) ListEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntries", reflect.TypeOf((*MockStore)(nil).ListEntries), arg0, arg1)
}

// ListTransfers mocks base method.
func (m *MockStore) ListTransfers(arg0 context.Context, arg1 Anuskh.ListTransfersParams) ([]Anuskh.Transfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransfers", arg0, arg1)
	ret0, _ := ret[0].([]Anuskh.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransfers indicates an expected call of ListTransfers.
func (mr *MockStoreMockRecorder) ListTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransfers", reflect.TypeOf((*MockStore)(nil).ListTransfers), arg0, arg1)
}

// TransferTx mocks base method.
func (m *MockStore) TransferTx(arg0 context.Context, arg1 Anuskh.TransferTxParams) (Anuskh.TransferTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferTx", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.TransferTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferTx indicates an expected call of TransferTx.
func (mr *MockStoreMockRecorder) TransferTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferTx", reflect.TypeOf((*MockStore)(nil).TransferTx), arg0, arg1)
}

// UpdateAccounts mocks base method.
func (m *MockStore) UpdateAccounts(arg0 context.Context, arg1 Anuskh.UpdateAccountsParams) (Anuskh.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccounts", arg0, arg1)
	ret0, _ := ret[0].(Anuskh.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccounts indicates an expected call of UpdateAccounts.
func (mr *MockStoreMockRecorder) UpdateAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccounts", reflect.TypeOf((*MockStore)(nil).UpdateAccounts), arg0, arg1)
}

// UpdateEntries mocks base method.
func (m *MockStore) UpdateEntries(arg0 context.Context, arg1 Anuskh.UpdateEntriesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntries", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntries indicates an expected call of UpdateEntries.
func (mr *MockStoreMockRecorder) UpdateEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntries", reflect.TypeOf((*MockStore)(nil).UpdateEntries), arg0, arg1)
}

// UpdateTransfers mocks base method.
func (m *MockStore) UpdateTransfers(arg0 context.Context, arg1 Anuskh.UpdateTransfersParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransfers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransfers indicates an expected call of UpdateTransfers.
func (mr *MockStoreMockRecorder) UpdateTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransfers", reflect.TypeOf((*MockStore)(nil).UpdateTransfers), arg0, arg1)
}
