// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: Transfers.sql

package main

import (
	"context"
)

const createTransfers = `-- name: CreateTransfers :one
INSERT INTO transfers (
  from_account_id,
  to_account_id,
  amount
) VALUES (
  $1, $2, $3
)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransfersParams struct {
	FromAccountID int64
	ToAccountID   int64
	Amount        int64
}

func (q *Queries) CreateTransfers(ctx context.Context, arg CreateTransfersParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfers, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfers = `-- name: DeleteTransfers :exec
DELETE FROM transfers
WHERE id = $1
`

func (q *Queries) DeleteTransfers(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfers, id)
	return err
}

const getTransfers = `-- name: GetTransfers :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetTransfers(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfers, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfers = `-- name: ListTransfers :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers
WHERE from_account_id = $3
   OR to_account_id = $4
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTransfersParams struct {
	Limit         int32
	Offset        int32
	FromAccountID int64
	ToAccountID   int64
}

func (q *Queries) ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfers,
		arg.Limit,
		arg.Offset,
		arg.FromAccountID,
		arg.ToAccountID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfers = `-- name: UpdateTransfers :exec
UPDATE transfers
set amount = $2
WHERE id = $1
`

type UpdateTransfersParams struct {
	ID     int64
	Amount int64
}

func (q *Queries) UpdateTransfers(ctx context.Context, arg UpdateTransfersParams) error {
	_, err := q.db.ExecContext(ctx, updateTransfers, arg.ID, arg.Amount)
	return err
}
